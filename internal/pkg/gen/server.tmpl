// Code generated with openapi-go DO NOT EDIT.
package {{ .Package }}

import (
    "context"
    "github.com/go-chi/chi/v5"
    oapi_rt "github.com/mworzala/openapi-go/pkg/oapi-rt"
    "go.uber.org/zap"
    {{ if .UseFx }}"go.uber.org/fx"{{ end }}
)

type {{ SnakeToPascal .Name }}Server interface {
{{ range .Operations }}
    {{ SnakeToPascal .Name }}(ctx context.Context, {{ range .PathParams }}{{ .Name }} string, {{ end }}{{ range .QueryParams }}{{ .Name }} string, {{ end }}{{ range .HeaderParams }}{{ DashToCamel .Name }} string, {{ end }}{{ with .Body }}req {{ .GoType }}{{ end }}) ({{ with .Response }}{{ range .Cases }}{{ .GoType }}, {{ end }}{{ end }}error){{ end }}
}

{{ $WRAPPER_CLASS := print (SnakeToPascal .Name) "ServerWrapper" }}
type {{ $WRAPPER_CLASS }} struct {
    log         *zap.SugaredLogger
    middlewares []oapi_rt.Middleware
    handler     {{ SnakeToPascal .Name }}Server
}

type {{ $WRAPPER_CLASS }}Params struct {
    {{ if .UseFx }}fx.In
    {{ end }}
    Log     *zap.SugaredLogger
    Handler {{ SnakeToPascal .Name }}Server
}

func New{{ $WRAPPER_CLASS }}(p {{ $WRAPPER_CLASS }}Params) (*{{ $WRAPPER_CLASS }}, error) {
    sw := &{{ $WRAPPER_CLASS }}{
        log: p.Log.With("handler", "{{ .Name }} (wrapper)"),
        handler: p.Handler,
    }

    return sw, nil
}

func (sw *{{ $WRAPPER_CLASS }}) Apply(r chi.Router) {
    r.Route("{{ .BasePath }}", func(r chi.Router) {
        {{ range .Operations }}
        r.{{ SnakeToPascal .Method }}("{{ .Path }}", sw.{{ SnakeToPascal .Name }}){{ end }}
    })
}

{{ range .Operations }}
func (sw *{{ $WRAPPER_CLASS }}) {{ SnakeToPascal .Name }}(w http.ResponseWriter, r *http.Request) {
    // Validate Parameters
    {{ range .QueryParams }}{{ if .Required }}if !r.URL.Query().Has("{{ .Name }}") {
        oapi_rt.WriteMissingParamError(w, "{{ .Name }}")
        return
    }{{ end }}{{ end }}

    // Read Parameters
    {{ range .PathParams }}{{ .Name }} := chi.URLParam(r, "{{ .Name }}"){{ end }}
    {{ range .QueryParams }}{{ .Name }} := r.URL.Query().Get("{{ .Name }}"){{ end }}
    {{ range .HeaderParams }}{{ DashToCamel .Name }} := r.Header.Get("{{ .Name }}"){{ end }}

    {{ with .Body }}// Read Body
    var body {{ NoPtr .GoType }}
    if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
        oapi_rt.WriteGenericError(w, err)
        return
    }{{ end }}

    var handler http.Handler
    handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        {{ with .Response }}{{ range .Cases }}{{ .Name }}, {{ end }}{{ end }}err := sw.handler.{{ SnakeToPascal .Name }}(r.Context(), {{ range .PathParams }}{{ .Name }}, {{ end }}{{ range .QueryParams }}{{ .Name }}, {{ end }}{{ range .HeaderParams }}{{ DashToCamel .Name }}, {{ end }}{{ if .Body }}&body{{ end }})
        if err != nil {
            oapi_rt.WriteGenericError(w, err)
            return
        }

        {{ with .Response }}
        {{ range .Cases }}{{ $NAME := .Name }}
        if {{ .Name }} != nil {
            {{ if .Single }}w.Header().Set("content-type", "{{ .Single.ContentType }}")
            w.WriteHeader({{ .Single.Code }})
            {{ if eq .Single.Name "[]byte" }}_, _ = w.Write({{ .Name }}){{ else }}if err = json.NewEncoder(w).Encode({{ .Name }}); err != nil {
                sw.log.Errorw("failed to encode response", "err", err)
                w.WriteHeader(http.StatusInternalServerError)
            }{{ end }}
            return{{ else }}switch { {{ range .Multi }}case {{ $NAME }}.{{ FieldNameFromContentType .ContentType }} != nil:
                w.Header().Set("content-type", "{{ .ContentType }}")
                w.WriteHeader({{ .Code }})
                {{ if eq .Name "[]byte" }}_, _ = w.Write({{ $NAME }}.{{ FieldNameFromContentType .ContentType }}){{ else }}if err = json.NewEncoder(w).Encode({{ $NAME }}.{{ FieldNameFromContentType .ContentType }}); err != nil {
                sw.log.Errorw("failed to encode response", "err", err)
                w.WriteHeader(http.StatusInternalServerError)
                }{{ end }}
                return
            {{ end }}}{{ end }}
        }
        {{ end }}
        {{ if .EmptyCode }}w.WriteHeader({{ .EmptyCode }}){{ else }}// !! UNDEFINED EMPTY BEHAVIOR !!
        // Set `x-type: empty` on a response to define this behavior.
        sw.log.Errorw("empty response")
        w.WriteHeader(http.StatusInternalServerError){{ end }}{{ end }}
    })
    for _, middleware := range sw.middlewares {
        handler = middleware.Run(handler)
    }
    handler.ServeHTTP(w, r)
}
{{ end }}
