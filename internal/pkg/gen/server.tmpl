// Code generated with openapi-go DO NOT EDIT.
package {{ .Package }}

import (
    "context"
    "github.com/go-chi/chi/v5"
    oapi_rt "github.com/ZakShearman/openapi-go/pkg/oapi-rt"
    "go.uber.org/zap"
    {{ if .UseFx }}"go.uber.org/fx"{{ end }}
    {{ range .ExtraImports }}
    "{{.}}"
    {{ end }}
)

type {{ CamelToPascal .Name }}Server interface {
{{- range .Operations }}
    {{ CamelToPascal .Name }}(ctx context.Context,
    {{- range .PathParams }} {{ .Name }} string,{{ end -}}
    {{- range .QueryParams }} {{ .Name }} {{ with .GoType }}{{ . }}{{ else }}{{ with .StructGoType }}{{ . }}{{ else }}{{ with .NumberGoType }}{{ . }}{{ else }}string{{ end }}{{ end }}{{ end }},{{ end -}}
    {{- range .HeaderParams }} {{ DashToCamel .CustomName }} string,{{ end -}}
    {{- with .Body }} req {{ .GoType }}{{ end -}}
    ) ({{ with .Response }}{{ range .Cases }}{{ .GoType }}, {{ end }}{{ end }}error)
{{- end }}
}

{{ $WRAPPER_CLASS := print (CamelToPascal .Name) "ServerWrapper" }}
type {{ $WRAPPER_CLASS }} struct {
    log         *zap.SugaredLogger
    middlewares []oapi_rt.Middleware
    handler     {{ CamelToPascal .Name }}Server
}

type {{ $WRAPPER_CLASS }}Params struct {
    {{ if .UseFx }}fx.In{{ end }}
    Log     *zap.SugaredLogger
    Handler {{ CamelToPascal .Name }}Server

    Middleware []oapi_rt.Middleware{{if .UseFx }} `group:"{{ .Name }}_middleware"`{{ end }}
}

func New{{ $WRAPPER_CLASS }}(p {{ $WRAPPER_CLASS }}Params) (*{{ $WRAPPER_CLASS }}, error) {
    sw := &{{ $WRAPPER_CLASS }}{
        log: p.Log.With("handler", "{{ .Name }} (wrapper)"),
        handler: p.Handler,
        middlewares: p.Middleware,
    }

    return sw, nil
}

func (sw *{{ $WRAPPER_CLASS }}) Apply(r chi.Router) {
    r.Route("{{ .BasePath }}", func(r chi.Router) {
    {{- range .Operations }}
        r.{{ CamelToPascal .Method }}("{{ .Path }}", sw.{{ CamelToPascal .Name }})
    {{- end }}
    })
}

{{ range .Operations }}
func (sw *{{ $WRAPPER_CLASS }}) {{ CamelToPascal .Name }}(w http.ResponseWriter, r *http.Request) {
    var err error
    _ = err // Sometimes we don't use it but need that not to be an error

    // Read Parameters
    {{ range .QueryParams }}
    {{ if .GoType }}
    {{ .Name }}Str := r.URL.Query().Get("{{ .Name }}")
    var {{ .Name }} {{ .GoType }}
    if {{ .Name }}Str != "" {
        {{ .Name }}, err = strconv.ParseBool({{ .Name }}Str)
        if err != nil {
            oapi_rt.WriteGenericError(w, err)
            return
        }
    }
    {{ else if .StructGoType }}
    var {{ .Name }} {{ NoPtr .StructGoType }}
    if err := oapi_rt.ReadExplodedQuery(r, &{{ .Name }}); err != nil {
        oapi_rt.WriteGenericError(w, err)
        return
    }
    {{ else if .NumberGoType }}
    {{ .Name }}Str := r.URL.Query().Get("{{ .Name }}")
    {{- if eq .NumberGoType "int" }}
    var {{ .Name }} int
    if {{ .Name }}Str != "" {
        {{ .Name }}, err = strconv.Atoi({{ .Name }}Str)
    {{ else }}
    var {{ .Name }} float64
    if {{ .Name }}Str != "" {
        {{ .Name }}, err = strconv.ParseFloat({{ .Name }}Str, 64)
    {{ end -}}
        if err != nil {
            oapi_rt.WriteGenericError(w, err)
            return
        }
    }
    {{ else }}
    {{ .Name }} := r.URL.Query().Get("{{ .Name }}")
    {{ end }}
    {{ end }}
    {{ range .HeaderParams }}
    {{ DashToCamel .CustomName }} := r.Header.Get("{{ .Name }}")
    {{ end }}
    {{ with .PathParams }}
    {{- range . }}
    {{ .Name }} := chi.URLParam(r, "{{ .Name }}")
    {{- end }}
    {{ end }}

    {{- with .Body }}
    // Read Body
    var body {{ NoPtr .GoType }}
    {{ if eq .GoType "io.Reader" }}
    body = r.Body
    {{ else }}
    {{ if .IsRaw }}
    if body, err = io.ReadAll(r.Body); err != nil {
    {{- else -}}
    if err = json.NewDecoder(r.Body).Decode(&body); err != nil {
    {{- end }}
        oapi_rt.WriteGenericError(w, err)
        return
    }
    {{ end }}
    {{ end }}
    var handler http.Handler
    handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        ctx := oapi_rt.NewContext(r.Context(), w, r)

        {{ with .Response }}
        {{ range .Cases }}
        {{- .Name }}, {{ end }}
        {{- end -}}
        err := sw.handler.{{ CamelToPascal .Name }}(ctx,
            {{- range .PathParams }} {{ .Name }},{{ end -}}
            {{- range .QueryParams }} {{ if .StructGoType }}&{{ end }}{{ .Name }},{{ end -}}
            {{- range .HeaderParams }} {{ DashToCamel .CustomName }},{{ end -}}
            {{- with .Body }} {{ if not .IsRaw }}&{{ end }}body{{ end -}}
        )
        if err != nil {
            oapi_rt.WriteGenericError(w, err)
            return
        }

        {{ with .Response }}
        {{- range .Cases }}{{ $NAME := .Name }}
        if {{ .Name }} != {{ .ZeroValue }} {
            {{ if .Single -}}
            w.Header().Set("content-type", "{{ .Single.ContentType }}")
            w.WriteHeader({{ .Single.Code }})
            {{- if eq .Single.Name "[]byte" }}
            _, _ = w.Write({{ .Name }})
            {{ else if eq .Single.Name "string" }}
            _, _ = w.Write([]byte({{ .Name }}))
            {{ else }}
            if err = json.NewEncoder(w).Encode({{ .Name }}); err != nil {
                sw.log.Errorw("failed to encode response", "err", err)
                w.WriteHeader(http.StatusInternalServerError)
            }
            {{- end }}
            return
            {{- else -}}
            switch {
            {{- range .Multi }}
            case {{ $NAME }}.{{ FieldNameFromContentType .ContentType }} != nil:
                w.Header().Set("content-type", "{{ .ContentType }}")
                w.WriteHeader({{ .Code }})
                {{- if eq .Name "[]byte" }}
                _, _ = w.Write({{ $NAME }}.{{ FieldNameFromContentType .ContentType }})
                {{ else }}
                if err = json.NewEncoder(w).Encode({{ $NAME }}.{{ FieldNameFromContentType .ContentType }}); err != nil {
                    sw.log.Errorw("failed to encode response", "err", err)
                    w.WriteHeader(http.StatusInternalServerError)
                }
                {{- end -}}
                return
            {{- end }}
            }
            {{- end }}
        }
        {{- end }}
        {{ if .EmptyCode }}
        w.WriteHeader({{ .EmptyCode }})
        {{- else }}
        // !! UNDEFINED EMPTY BEHAVIOR !!
        // Set `x-type: empty` on a response to define this behavior.
        sw.log.Errorw("empty response")
        w.WriteHeader(http.StatusInternalServerError)
        {{- end }}
        {{- end }}
    })
    for _, middleware := range sw.middlewares {
        handler = middleware.Run(handler)
    }
    handler.ServeHTTP(w, r)
}
{{ end }}
